import axios from "axios";
import { v2 as cloudinary } from "cloudinary";
import { mongoose } from "mongoose";
import { Blog } from "../models/Blog.model.js";
import { Course } from "../models/course.model.js";
import { asyncHandler } from "../utils/asyncHandler.js";
import { Class } from "./../models/Class.model.js";
import { FreeClass } from "./../models/freeClass.model.js";
import { Material } from "./../models/Material.model.js";
import { Notice } from "./../models/notice.model.js";
import { Staff } from "./../models/staff.model.js";
import { Student } from "./../models/student.model.js";

const homeController = asyncHandler(async (req, res, next) => {
  const htmlResponse = `
  <!DOCTYPE html>
<html>
<head>
    <title>Suvash Edu API</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
        }
        
        .grid-container {
            position: absolute;
            width: 100%;
            height: 100%;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            grid-template-rows: repeat(auto-fill, minmax(100px, 1fr));
            z-index: 0;
        }
        
        .grid-item {
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
        }
        
        .grid-item:hover {
            background: rgba(255, 255, 255, 0.3);
        }
        
        .content {
            position: relative;
            z-index: 1;
            background: rgba(255, 255, 255, 0.9);
            padding: 3rem;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            text-align: center;
            max-width: 600px;
        }
        
        h1 {
            color: #3a4a6d;
            margin-bottom: 1.5rem;
            font-size: 2.5rem;
        }
        
        p {
            color: #5a6a8a;
            font-size: 1.2rem;
            line-height: 1.6;
        }
        
        .status {
            display: inline-block;
            background: #4CAF50;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: bold;
            margin-top: 1rem;
        }
        
        .api-name {
            color: #4CAF50;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="grid-container">
        <!-- Grid items will be generated by JavaScript -->
    </div>
    
    <div class="content">
        <h1>Welcome to <span class="api-name">Suvash Edu API</span></h1>
        <p>Your request was processed successfully. The API is up and running, ready to serve your educational needs with reliable data and seamless integration.</p>
        <div class="status">Status: 200 | Successful Request</div>
    </div>

    <script>
        // Generate grid items dynamically
        const gridContainer = document.querySelector('.grid-container');
        const gridItemsCount = Math.floor(window.innerWidth / 100) * Math.floor(window.innerHeight / 100);
        
        for (let i = 0; i < gridItemsCount; i++) {
            const gridItem = document.createElement('div');
            gridItem.className = 'grid-item';
            gridContainer.appendChild(gridItem);
        }
        
        // Add subtle animation to grid items
        const gridItems = document.querySelectorAll('.grid-item');
        gridItems.forEach(item => {
            item.addEventListener('mouseover', () => {
                item.style.transform = 'scale(1.05)';
            });
            item.addEventListener('mouseout', () => {
                item.style.transform = 'scale(1)';
            });
        });
    </script>
</body>
</html>
  `;

  res.status(200).send(htmlResponse);
});

const getCourse = asyncHandler(async (req, res, next) => {
  const { id } = req.params;
  const course = await Course.findOne({ id });

  if (!course) {
    return res
      .status(404)
      .json({ success: false, message: "Course not found" });
  }
  res.status(200).json({ success: true, data: course });
});

const getAllCourse = asyncHandler(async (req, res, next) => {
  const allCourse = await Course.find({}).select("-description");
  if (!allCourse || allCourse.length === 0) {
    return res
      .status(404)
      .json({ success: false, message: "Could not find any course." });
  }

  return res
    .status(200)
    .json({ success: true, data: allCourse, message: "Fetch successful" });
});

const getCoursesByCategory = asyncHandler(async (req, res, next) => {
  const { category: encodedCategory } = req.params;

  const category = decodeURIComponent(encodedCategory);

  let courseForValues;
  if (category === "class 9-12") {
    courseForValues = [
      "class 9",
      "class 10",
      "class 11",
      "class 12",
      "hsc",
      "ssc",
    ];
  } else if (category === "admission") {
    courseForValues = ["admission"];
  } else if (category === "job preparation") {
    courseForValues = ["job preparation"];
  } else {
    return res
      .status(400)
      .json({ success: false, message: "Invalid category" });
  }

  const courses = await Course.find({
    courseFor: { $in: courseForValues },
  }).select("-description");

  return res.status(200).json({
    success: true,
    data: courses || [],
    message: courses.length > 0 ? "Fetch successful" : "No courses found",
  });
});

const getHomePageData = asyncHandler(async (req, res, next) => {
  const studentCount = await Student.countDocuments({});
  const staffCount = (await Staff.countDocuments({ role: "staff" })) || 0;
  const teacherCount = (await Staff.countDocuments({ role: "teacher" })) || 0;
  const classCount = await Class.countDocuments({});
  const courseCount = await Course.countDocuments({});

  const materialCount = classCount + courseCount;

  return res.status(200).json({
    success: true,
    message: "Fetched data",
    data: {
      studentCount: studentCount + 3000,
      staffCount: staffCount + teacherCount,
      materialCount,
    },
  });
});

const getNotice = asyncHandler(async (req, res, next) => {
  const notice = await Notice.findOne().sort({ _id: -1 });

  return res.status(200).json({
    success: true,
    message: notice ? "Found notice!" : "No notice found",
    data: notice || { content: "" },
  });
});

const getFreeClasses = asyncHandler(async (req, res, next) => {
  const freeClasses = await FreeClass.find().sort({ createdAt: -1 }).limit(6);

  if (!freeClasses || freeClasses.length === 0) {
    return res
      .status(400)
      .json({ success: false, message: "Could not find free classes" });
  }

  return res
    .status(200)
    .json({ success: true, message: "Found free classes!", data: freeClasses });
});

const searchCourses = asyncHandler(async (req, res, next) => {
  const { query } = req.query;

  if (!query || typeof query !== "string" || query.trim() === "") {
    return res.status(400).json({
      success: false,
      message: "Query parameter is required",
      data: [],
    });
  }

  const searchQuery = query.trim();

  try {
    const courses = await Course.find({
      $or: [
        { title: { $regex: searchQuery, $options: "i" } },
        { short_description: { $regex: searchQuery, $options: "i" } },
        { tags: { $regex: searchQuery, $options: "i" } },
        { subjects: { $regex: searchQuery, $options: "i" } },
      ],
    })
      .select("id title short_description thumbnailUrl courseFor")
      .limit(10)
      .lean();

    return res.status(200).json({
      success: true,
      message: courses.length > 0 ? "Courses found" : "No courses found",
      data: courses,
    });
  } catch (error) {
    console.error("Search error:", error);
    return res.status(500).json({
      error: false,
      message: "Internal server error",
      data: [],
    });
  }
});

const getBlogs = asyncHandler(async (req, res) => {
  const { page = 1, limit = 10 } = req.query;
  const pageNum = parseInt(page, 10);
  const limitNum = parseInt(limit, 10);

  if (isNaN(pageNum) || pageNum < 1) {
    return res.status(400).json({
      success: false,
      message: "Invalid page number",
    });
  }
  if (isNaN(limitNum) || limitNum < 1 || limitNum > 100) {
    return res.status(400).json({
      success: false,
      message: "Invalid limit value",
    });
  }

  const skip = (pageNum - 1) * limitNum;

  const blogs = await Blog.find()
    .select("title shortDescription thumbnail author createdAt updatedAt")
    .sort({ createdAt: -1 })
    .skip(skip)
    .limit(limitNum)
    .lean();

  const totalBlogs = await Blog.countDocuments();

  return res.status(200).json({
    success: true,
    message: blogs.length > 0 ? "Blogs fetched successfully" : "No blogs found",
    data: {
      blogs,
      pagination: {
        currentPage: pageNum,
        totalPages: Math.ceil(totalBlogs / limitNum),
        totalBlogs,
      },
    },
  });
});

const getBlog = asyncHandler(async (req, res) => {
  const { id } = req.params;

  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(400).json({
      success: false,
      message: "Invalid blog ID",
    });
  }

  const blog = await Blog.findById(id).lean();

  if (!blog) {
    return res.status(404).json({
      success: false,
      message: "Blog not found",
    });
  }

  return res.status(200).json({
    success: true,
    message: "Blog fetched successfully",
    data: blog,
  });
});

//materials
const streamMaterial = asyncHandler(async (req, res, next) => {
  const { id } = req.params;
  const userId = req.student?._id;

  const material = await Material.findById(id);

  if (!material) {
    return res.status(404).json({
      success: false,
      message: "Material not found",
    });
  }



  // Generate a signed URL with short expiration
  const signedUrl = cloudinary.utils.private_download_url(
    material.publicId,
    "pdf",
    {
      resource_type: "raw",
      expires_at: Math.floor(Date.now() / 1000) + 60, // Expires in 60 seconds
      attachment: false, // Prevent download
    }
  );

  try {
    const response = await axios.get(signedUrl, { responseType: "stream" });
    res.setHeader("Content-Type", "application/pdf");
    res.setHeader("Content-Disposition", "inline; filename=material.pdf");
    response.data.pipe(res);
  } catch (error) {
    console.error("Error streaming PDF:", error);
    return res.status(500).json({
      success: false,
      message: "Error streaming PDF",
    });
  }
});

//material payment

const getMaterialForPurchase = asyncHandler(async (req, res, next) => {
  const { id } = req.params;
  const material = await Material.findById(id).select("-publicId -contentUrl");
  if (!material) {
    return res.status(404).json({
      success: false,
      message: "Material not found",
    });
  }

  return res.status(200).json({
    success: true,
    message: "Material found",
    data: material,
  });
});

const getMaterials = asyncHandler(async (req, res, next) => {
  const materials = await Material.find({}).sort({ createdAt: -1 }).select("-forCourses -publicId -accessControl -contentUrl");

  if(!materials){
     return res
    .status(500)
    .json({ success: false, message: "successful fetch", materials: [] });
  }

  return res
    .status(200)
    .json({ success: true, message: "unsuccessful fetch", materials });
});

export {
  getMaterials,
  getAllCourse,
  getBlog,
  getBlogs,
  getCourse,
  getCoursesByCategory,
  getFreeClasses,
  getHomePageData,
  getMaterialForPurchase,
  getNotice,
  homeController,
  searchCourses,
  streamMaterial,
};
